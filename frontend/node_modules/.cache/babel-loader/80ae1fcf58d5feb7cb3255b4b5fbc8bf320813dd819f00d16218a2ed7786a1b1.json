{"ast":null,"code":"import axios from \"axios\";\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: \"/api\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Add request interceptor to add auth token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle common errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // Handle 401 Unauthorized errors (token expired or invalid)\n  if (error.response && error.response.status === 401) {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    window.location.href = \"/login\";\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  register: userData => api.post(\"/auth/register\", userData),\n  login: credentials => api.post(\"/auth/login\", credentials),\n  getProfile: () => api.get(\"/auth/me\"),\n  updateProfile: userData => api.put(\"/auth/updateprofile\", userData),\n  updatePassword: passwordData => api.put(\"/auth/updatepassword\", passwordData),\n  forgotPassword: email => api.post(\"/auth/forgotpassword\", {\n    email\n  }),\n  resetPassword: (token, password) => api.put(`/auth/resetpassword/${token}`, {\n    password\n  }),\n  // Admin only\n  getUsers: () => api.get(\"/auth/users\"),\n  createUser: userData => api.post(\"/auth/users\", userData),\n  updateUser: (id, userData) => api.put(`/auth/users/${id}`, userData),\n  deleteUser: id => api.delete(`/auth/users/${id}`)\n};\n\n// Exams API\nexport const examsAPI = {\n  getExams: () => api.get(\"/exams\"),\n  getExam: id => api.get(`/exams/${id}`),\n  createExam: examData => api.post(\"/exams\", examData),\n  updateExam: (id, examData) => api.put(`/exams/${id}`, examData),\n  deleteExam: id => api.delete(`/exams/${id}`),\n  publishExam: id => api.put(`/exams/${id}/publish`),\n  archiveExam: id => api.put(`/exams/${id}/archive`),\n  getAvailableExams: () => api.get(\"/exams/available\"),\n  getUpcomingExams: () => api.get(\"/exams/upcoming\"),\n  getPastExams: () => api.get(\"/exams/past\")\n};\n\n// Questions API\nexport const questionsAPI = {\n  getQuestions: () => api.get(\"/questions\"),\n  getQuestion: id => api.get(`/questions/${id}`),\n  createQuestion: questionData => api.post(\"/questions\", questionData),\n  updateQuestion: (id, questionData) => api.put(`/questions/${id}`, questionData),\n  deleteQuestion: id => api.delete(`/questions/${id}`),\n  getExamQuestions: examId => api.get(`/questions/exam/${examId}`)\n};\n\n// Submissions API\nexport const submissionsAPI = {\n  getSubmissions: () => api.get(\"/submissions\"),\n  getSubmission: id => api.get(`/submissions/${id}`),\n  createSubmission: submissionData => api.post(\"/submissions\", submissionData),\n  updateSubmission: (id, submissionData) => api.put(`/submissions/${id}`, submissionData),\n  submitExam: id => api.put(`/submissions/${id}/submit`),\n  gradeSubmission: (id, gradingData) => api.put(`/submissions/${id}/grade`, gradingData),\n  getUserSubmissions: () => api.get(\"/submissions/user\"),\n  getExamSubmissions: examId => api.get(`/submissions/exam/${examId}`),\n  saveAnswer: (submissionId, answerData) => api.post(`/submissions/${submissionId}/answer`, answerData)\n};\n\n// Certificates API\nexport const certificatesAPI = {\n  getCertificates: () => api.get(\"/certificates\"),\n  getCertificate: id => api.get(`/certificates/${id}`),\n  generateCertificate: data => api.post(\"/certificates\", data),\n  verifyCertificate: certificateNumber => api.get(`/certificates/verify/${certificateNumber}`),\n  getUserCertificates: () => api.get(\"/certificates/user\"),\n  downloadCertificate: id => api.get(`/certificates/${id}/download`, {\n    responseType: \"blob\"\n  })\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","window","location","href","authAPI","register","userData","post","login","credentials","getProfile","get","updateProfile","put","updatePassword","passwordData","forgotPassword","email","resetPassword","password","getUsers","createUser","updateUser","id","deleteUser","delete","examsAPI","getExams","getExam","createExam","examData","updateExam","deleteExam","publishExam","archiveExam","getAvailableExams","getUpcomingExams","getPastExams","questionsAPI","getQuestions","getQuestion","createQuestion","questionData","updateQuestion","deleteQuestion","getExamQuestions","examId","submissionsAPI","getSubmissions","getSubmission","createSubmission","submissionData","updateSubmission","submitExam","gradeSubmission","gradingData","getUserSubmissions","getExamSubmissions","saveAnswer","submissionId","answerData","certificatesAPI","getCertificates","getCertificate","generateCertificate","data","verifyCertificate","certificateNumber","getUserCertificates","downloadCertificate","responseType"],"sources":["D:/MyDownloads/cloneonlineexamplatform1/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\"\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: \"/api\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n})\n\n// Add request interceptor to add auth token to requests\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\")\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n    return config\n  },\n  (error) => {\n    return Promise.reject(error)\n  },\n)\n\n// Add response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => {\n    return response\n  },\n  (error) => {\n    // Handle 401 Unauthorized errors (token expired or invalid)\n    if (error.response && error.response.status === 401) {\n      localStorage.removeItem(\"token\")\n      localStorage.removeItem(\"user\")\n      window.location.href = \"/login\"\n    }\n    return Promise.reject(error)\n  },\n)\n\n// Auth API\nexport const authAPI = {\n  register: (userData) => api.post(\"/auth/register\", userData),\n  login: (credentials) => api.post(\"/auth/login\", credentials),\n  getProfile: () => api.get(\"/auth/me\"),\n  updateProfile: (userData) => api.put(\"/auth/updateprofile\", userData),\n  updatePassword: (passwordData) => api.put(\"/auth/updatepassword\", passwordData),\n  forgotPassword: (email) => api.post(\"/auth/forgotpassword\", { email }),\n  resetPassword: (token, password) => api.put(`/auth/resetpassword/${token}`, { password }),\n  // Admin only\n  getUsers: () => api.get(\"/auth/users\"),\n  createUser: (userData) => api.post(\"/auth/users\", userData),\n  updateUser: (id, userData) => api.put(`/auth/users/${id}`, userData),\n  deleteUser: (id) => api.delete(`/auth/users/${id}`),\n}\n\n// Exams API\nexport const examsAPI = {\n  getExams: () => api.get(\"/exams\"),\n  getExam: (id) => api.get(`/exams/${id}`),\n  createExam: (examData) => api.post(\"/exams\", examData),\n  updateExam: (id, examData) => api.put(`/exams/${id}`, examData),\n  deleteExam: (id) => api.delete(`/exams/${id}`),\n  publishExam: (id) => api.put(`/exams/${id}/publish`),\n  archiveExam: (id) => api.put(`/exams/${id}/archive`),\n  getAvailableExams: () => api.get(\"/exams/available\"),\n  getUpcomingExams: () => api.get(\"/exams/upcoming\"),\n  getPastExams: () => api.get(\"/exams/past\"),\n}\n\n// Questions API\nexport const questionsAPI = {\n  getQuestions: () => api.get(\"/questions\"),\n  getQuestion: (id) => api.get(`/questions/${id}`),\n  createQuestion: (questionData) => api.post(\"/questions\", questionData),\n  updateQuestion: (id, questionData) => api.put(`/questions/${id}`, questionData),\n  deleteQuestion: (id) => api.delete(`/questions/${id}`),\n  getExamQuestions: (examId) => api.get(`/questions/exam/${examId}`),\n}\n\n// Submissions API\nexport const submissionsAPI = {\n  getSubmissions: () => api.get(\"/submissions\"),\n  getSubmission: (id) => api.get(`/submissions/${id}`),\n  createSubmission: (submissionData) => api.post(\"/submissions\", submissionData),\n  updateSubmission: (id, submissionData) => api.put(`/submissions/${id}`, submissionData),\n  submitExam: (id) => api.put(`/submissions/${id}/submit`),\n  gradeSubmission: (id, gradingData) => api.put(`/submissions/${id}/grade`, gradingData),\n  getUserSubmissions: () => api.get(\"/submissions/user\"),\n  getExamSubmissions: (examId) => api.get(`/submissions/exam/${examId}`),\n  saveAnswer: (submissionId, answerData) => api.post(`/submissions/${submissionId}/answer`, answerData),\n}\n\n// Certificates API\nexport const certificatesAPI = {\n  getCertificates: () => api.get(\"/certificates\"),\n  getCertificate: (id) => api.get(`/certificates/${id}`),\n  generateCertificate: (data) => api.post(\"/certificates\", data),\n  verifyCertificate: (certificateNumber) => api.get(`/certificates/verify/${certificateNumber}`),\n  getUserCertificates: () => api.get(\"/certificates/user\"),\n  downloadCertificate: (id) => api.get(`/certificates/${id}/download`, { responseType: \"blob\" }),\n}\n\nexport default api\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}