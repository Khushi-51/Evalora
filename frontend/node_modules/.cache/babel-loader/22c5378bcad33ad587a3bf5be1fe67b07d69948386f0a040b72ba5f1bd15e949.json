{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"D:\\\\MyDownloads\\\\cloneonlineexamplatform1\\\\frontend\\\\src\\\\pages\\\\student\\\\TakeExam.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useContext, useRef } from \"react\";\nimport { useParams, useLocation, useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { examsAPI, questionsAPI, submissionsAPI } from \"../../services/api\";\nimport AuthContext from \"../../context/AuthContext\";\nimport Loader from \"../../components/common/Loader\";\nimport Modal from \"../../components/common/Modal\";\nimport { joinExam, startExam, syncTime, sendProctoringAlert } from \"../../services/socket\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TakeExam = () => {\n  _s();\n  var _location$state;\n  const {\n    id: examId\n  } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [loading, setLoading] = useState(true);\n  const [submitting, setSubmitting] = useState(false);\n  const [exam, setExam] = useState(null);\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState({});\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [showSubmitModal, setShowSubmitModal] = useState(false);\n  const [submission, setSubmission] = useState(null);\n  const timerRef = useRef(null);\n  const webcamRef = useRef(null);\n\n  // Get submission ID from location state or create a new one\n  const submissionId = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.submissionId;\n  useEffect(() => {\n    if (!submissionId) {\n      // If no submission ID is provided, redirect to exam details\n      navigate(`/exams/${examId}`);\n      return;\n    }\n    fetchExamData();\n\n    // Clean up timer on unmount\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    };\n  }, [examId, submissionId]);\n  const fetchExamData = async () => {\n    setLoading(true);\n    try {\n      // Fetch exam details\n      const examResponse = await examsAPI.getExam(examId);\n      setExam(examResponse.data.data);\n\n      // Fetch submission\n      const submissionResponse = await submissionsAPI.getSubmission(submissionId);\n      const submissionData = submissionResponse.data.data;\n      setSubmission(submissionData);\n\n      // If submission is already completed, redirect to results\n      if (submissionData.isCompleted) {\n        navigate(`/results/${submissionId}`);\n        return;\n      }\n\n      // Fetch questions\n      const questionsResponse = await questionsAPI.getExamQuestions(examId);\n      let examQuestions = questionsResponse.data.data;\n\n      // Randomize questions if needed\n      if (examResponse.data.data.randomizeQuestions) {\n        examQuestions = shuffleArray(examQuestions);\n      }\n      setQuestions(examQuestions);\n\n      // Initialize answers from existing submission\n      const initialAnswers = {};\n      if (submissionData.answers && submissionData.answers.length > 0) {\n        submissionData.answers.forEach(answer => {\n          initialAnswers[answer.question] = {\n            selectedOptions: answer.selectedOptions || [],\n            textAnswer: answer.textAnswer || \"\",\n            codeAnswer: answer.codeAnswer || \"\"\n          };\n        });\n      }\n      setAnswers(initialAnswers);\n\n      // Calculate time remaining\n      const startTime = new Date(submissionData.startTime);\n      const durationMs = examResponse.data.data.duration * 60 * 1000;\n      const endTime = new Date(startTime.getTime() + durationMs);\n      const now = new Date();\n      const remainingMs = Math.max(0, endTime - now);\n      setTimeRemaining(Math.floor(remainingMs / 1000));\n\n      // Start timer\n      startTimer();\n\n      // Join exam room via socket\n      joinExam(examId);\n\n      // Notify that student started exam\n      startExam(examId, user.id, timeRemaining);\n\n      // Initialize proctoring if needed\n      if (examResponse.data.data.isProctored) {\n        initializeProctoring();\n      }\n      setLoading(false);\n    } catch (error) {\n      console.error(\"Error fetching exam data:\", error);\n      toast.error(\"Failed to load exam\");\n      navigate(`/exams/${examId}`);\n    }\n  };\n  const startTimer = () => {\n    timerRef.current = setInterval(() => {\n      setTimeRemaining(prevTime => {\n        if (prevTime <= 1) {\n          clearInterval(timerRef.current);\n          handleTimeUp();\n          return 0;\n        }\n\n        // Sync time every minute\n        if (prevTime % 60 === 0) {\n          syncTime(examId, user.id, prevTime);\n        }\n        return prevTime - 1;\n      });\n    }, 1000);\n  };\n  const handleTimeUp = async () => {\n    toast.warning(\"Time is up! Your exam is being submitted.\");\n    await handleSubmitExam();\n  };\n  const initializeProctoring = async () => {\n    if (!exam.isProctored) return;\n    try {\n      // Request webcam access if needed\n      if (exam.proctoringSettings.detectFaces || exam.proctoringSettings.recordWebcam) {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        if (webcamRef.current) {\n          webcamRef.current.srcObject = stream;\n        }\n\n        // Set up face detection (simplified for this example)\n        if (exam.proctoringSettings.detectFaces) {\n          // In a real implementation, you would use a face detection library\n          // For now, we'll just simulate detection with random alerts\n          setInterval(() => {\n            const shouldAlert = Math.random() < 0.05; // 5% chance of alert\n            if (shouldAlert) {\n              sendProctoringAlert(examId, user.id, \"face_missing\", \"Face not detected in frame\");\n              toast.warning(\"Proctoring Alert: Face not detected\");\n            }\n          }, 30000);\n        }\n      }\n\n      // Set up tab switching detection\n      if (exam.proctoringSettings.preventTabSwitching) {\n        document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n      }\n    } catch (error) {\n      console.error(\"Error initializing proctoring:\", error);\n      toast.error(\"Failed to initialize proctoring. Please ensure camera access is allowed.\");\n    }\n  };\n  const handleVisibilityChange = () => {\n    if (document.hidden) {\n      sendProctoringAlert(examId, user.id, \"tab_switch\", \"User switched tabs\");\n      toast.warning(\"Proctoring Alert: Tab switching detected\");\n    }\n  };\n  const shuffleArray = array => {\n    const newArray = [...array];\n    for (let i = newArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n    }\n    return newArray;\n  };\n  const formatTime = seconds => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const secs = seconds % 60;\n    return `${hours.toString().padStart(2, \"0\")}:${minutes.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`;\n  };\n  const handleOptionChange = (questionId, optionText, isMultiple) => {\n    setAnswers(prevAnswers => {\n      const currentAnswer = prevAnswers[questionId] || {\n        selectedOptions: [],\n        textAnswer: \"\",\n        codeAnswer: \"\"\n      };\n      let newSelectedOptions;\n      if (isMultiple) {\n        // For multiple choice, toggle the option\n        if (currentAnswer.selectedOptions.includes(optionText)) {\n          newSelectedOptions = currentAnswer.selectedOptions.filter(opt => opt !== optionText);\n        } else {\n          newSelectedOptions = [...currentAnswer.selectedOptions, optionText];\n        }\n      } else {\n        // For single choice, replace the selection\n        newSelectedOptions = [optionText];\n      }\n      const updatedAnswer = {\n        ...currentAnswer,\n        selectedOptions: newSelectedOptions\n      };\n\n      // Save answer to server\n      saveAnswer(questionId, updatedAnswer);\n      return {\n        ...prevAnswers,\n        [questionId]: updatedAnswer\n      };\n    });\n  };\n  const handleTextAnswerChange = (questionId, text) => {\n    setAnswers(prevAnswers => {\n      const currentAnswer = prevAnswers[questionId] || {\n        selectedOptions: [],\n        textAnswer: \"\",\n        codeAnswer: \"\"\n      };\n      const updatedAnswer = {\n        ...currentAnswer,\n        textAnswer: text\n      };\n\n      // Debounce saving text answers to reduce API calls\n      if (window.textAnswerTimeout) {\n        clearTimeout(window.textAnswerTimeout);\n      }\n      window.textAnswerTimeout = setTimeout(() => {\n        saveAnswer(questionId, updatedAnswer);\n      }, 1000);\n      return {\n        ...prevAnswers,\n        [questionId]: updatedAnswer\n      };\n    });\n  };\n  const handleCodeAnswerChange = (questionId, code) => {\n    setAnswers(prevAnswers => {\n      const currentAnswer = prevAnswers[questionId] || {\n        selectedOptions: [],\n        textAnswer: \"\",\n        codeAnswer: \"\"\n      };\n      const updatedAnswer = {\n        ...currentAnswer,\n        codeAnswer: code\n      };\n\n      // Debounce saving code answers to reduce API calls\n      if (window.codeAnswerTimeout) {\n        clearTimeout(window.codeAnswerTimeout);\n      }\n      window.codeAnswerTimeout = setTimeout(() => {\n        saveAnswer(questionId, updatedAnswer);\n      }, 1000);\n      return {\n        ...prevAnswers,\n        [questionId]: updatedAnswer\n      };\n    });\n  };\n  const saveAnswer = async (questionId, answerData) => {\n    try {\n      await submissionsAPI.saveAnswer(submissionId, {\n        question: questionId,\n        selectedOptions: answerData.selectedOptions,\n        textAnswer: answerData.textAnswer,\n        codeAnswer: answerData.codeAnswer\n      });\n    } catch (error) {\n      console.error(\"Error saving answer:\", error);\n      // Don't show toast for every save to avoid spamming the user\n    }\n  };\n  const handleNextQuestion = () => {\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n  };\n  const handlePrevQuestion = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\n    }\n  };\n  const handleJumpToQuestion = index => {\n    if (index >= 0 && index < questions.length) {\n      setCurrentQuestionIndex(index);\n    }\n  };\n  const handleSubmitExam = async () => {\n    setSubmitting(true);\n    try {\n      // Submit the exam\n      await submissionsAPI.submitExam(submissionId);\n\n      // Clear timer\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n\n      // Clean up proctoring\n      if (exam.isProctored) {\n        document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n        if (webcamRef.current && webcamRef.current.srcObject) {\n          webcamRef.current.srcObject.getTracks().forEach(track => track.stop());\n        }\n      }\n\n      // Navigate to results page\n      navigate(`/results/${submissionId}`);\n    } catch (error) {\n      console.error(\"Error submitting exam:\", error);\n      toast.error(\"Failed to submit exam. Please try again.\");\n      setSubmitting(false);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 12\n    }, this);\n  }\n  if (!exam || !questions.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container py-4\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        children: \"Failed to load exam questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 7\n    }, this);\n  }\n  const currentQuestion = questions[currentQuestionIndex];\n  const isLastQuestion = currentQuestionIndex === questions.length - 1;\n  const isFirstQuestion = currentQuestionIndex === 0;\n  const currentAnswer = answers[currentQuestion._id] || {\n    selectedOptions: [],\n    textAnswer: \"\",\n    codeAnswer: \"\"\n  };\n  const isMultipleChoice = currentQuestion.type === \"mcq-multiple\";\n  const isTimeAlmostUp = timeRemaining < 300; // Less than 5 minutes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exam-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `exam-timer ${isTimeAlmostUp ? \"timer-warning\" : \"\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Question \", currentQuestionIndex + 1, \" of \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer-value\",\n        children: [\"Time Remaining: \", formatTime(timeRemaining)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this), exam.isProctored && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"proctoring-container\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\u26A0\\uFE0F This exam is being proctored. Please keep your face visible and do not switch tabs.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-navigation\",\n      children: questions.map((q, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `question-nav-button ${index === currentQuestionIndex ? \"active\" : \"\"} ${answers[q._id] ? \"answered\" : \"\"}`,\n        onClick: () => handleJumpToQuestion(index),\n        children: index + 1\n      }, q._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-number\",\n        children: [\"Question \", currentQuestionIndex + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-text\",\n        children: currentQuestion.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }, this), currentQuestion.image && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: currentQuestion.image || \"/placeholder.svg\",\n        alt: \"Question\",\n        className: \"question-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 11\n      }, this), currentQuestion.code && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"code-snippet\",\n        children: /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: /*#__PURE__*/_jsxDEV(\"code\", {\n            children: currentQuestion.code\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 11\n      }, this), (currentQuestion.type === \"mcq-single\" || currentQuestion.type === \"mcq-multiple\") && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"options-list\",\n        children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"option-item\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"option-label\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: isMultipleChoice ? \"checkbox\" : \"radio\",\n              name: `question-${currentQuestion._id}`,\n              value: option.text,\n              checked: currentAnswer.selectedOptions.includes(option.text),\n              onChange: () => handleOptionChange(currentQuestion._id, option.text, isMultipleChoice),\n              className: \"option-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"option-text\",\n              children: option.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 11\n      }, this), (currentQuestion.type === \"short-answer\" || currentQuestion.type === \"essay\") && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-answer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"text-answer\",\n          className: \"text-answer-label\",\n          children: \"Your Answer:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"text-answer\",\n          className: \"text-answer\",\n          value: currentAnswer.textAnswer,\n          onChange: e => handleTextAnswerChange(currentQuestion._id, e.target.value),\n          placeholder: \"Type your answer here...\",\n          rows: currentQuestion.type === \"essay\" ? 10 : 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 11\n      }, this), currentQuestion.type === \"coding\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"code-answer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"code-answer\",\n          className: \"text-answer-label\",\n          children: [\"Your Code (\", currentQuestion.codeLanguage || \"text\", \"):\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"code-answer\",\n          className: \"code-editor\",\n          value: currentAnswer.codeAnswer,\n          onChange: e => handleCodeAnswerChange(currentQuestion._id, e.target.value),\n          placeholder: `Write your ${currentQuestion.codeLanguage || \"code\"} here...`,\n          rows: 12\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navigation-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary\",\n          onClick: handlePrevQuestion,\n          disabled: isFirstQuestion,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 11\n        }, this), isLastQuestion ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: () => setShowSubmitModal(true),\n          children: \"Submit Exam\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: handleNextQuestion,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 7\n    }, this), exam.isProctored && (exam.proctoringSettings.detectFaces || exam.proctoringSettings.recordWebcam) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"webcam-container\",\n      children: /*#__PURE__*/_jsxDEV(\"video\", {\n        ref: webcamRef,\n        autoPlay: true,\n        muted: true,\n        className: \"webcam-video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showSubmitModal,\n      onClose: () => setShowSubmitModal(false),\n      title: \"Submit Exam\",\n      footer: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary\",\n          onClick: () => setShowSubmitModal(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: handleSubmitExam,\n          disabled: submitting,\n          children: submitting ? \"Submitting...\" : \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Are you sure you want to submit your exam?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"You have answered \", Object.keys(answers).length, \" out of \", questions.length, \" questions.\", Object.keys(answers).length < questions.length && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-danger\",\n            children: \" Some questions are still unanswered.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 517,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Once submitted, you cannot change your answers.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 366,\n    columnNumber: 5\n  }, this);\n};\n_s(TakeExam, \"QMfKTvn2DwRUqBuJU2IA95YbgCg=\", false, function () {\n  return [useParams, useLocation, useNavigate];\n});\n_c = TakeExam;\nexport default TakeExam;\nvar _c;\n$RefreshReg$(_c, \"TakeExam\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useEffect","useContext","useRef","useParams","useLocation","useNavigate","toast","examsAPI","questionsAPI","submissionsAPI","AuthContext","Loader","Modal","joinExam","startExam","syncTime","sendProctoringAlert","jsxDEV","_jsxDEV","Fragment","_Fragment","TakeExam","_location$state","id","examId","location","navigate","user","loading","setLoading","submitting","setSubmitting","exam","setExam","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","timeRemaining","setTimeRemaining","showSubmitModal","setShowSubmitModal","submission","setSubmission","timerRef","webcamRef","submissionId","state","fetchExamData","current","clearInterval","examResponse","getExam","data","submissionResponse","getSubmission","submissionData","isCompleted","questionsResponse","getExamQuestions","examQuestions","randomizeQuestions","shuffleArray","initialAnswers","length","forEach","answer","question","selectedOptions","textAnswer","codeAnswer","startTime","Date","durationMs","duration","endTime","getTime","now","remainingMs","Math","max","floor","startTimer","isProctored","initializeProctoring","error","console","setInterval","prevTime","handleTimeUp","warning","handleSubmitExam","proctoringSettings","detectFaces","recordWebcam","stream","navigator","mediaDevices","getUserMedia","video","srcObject","shouldAlert","random","preventTabSwitching","document","addEventListener","handleVisibilityChange","hidden","array","newArray","i","j","formatTime","seconds","hours","minutes","secs","toString","padStart","handleOptionChange","questionId","optionText","isMultiple","prevAnswers","currentAnswer","newSelectedOptions","includes","filter","opt","updatedAnswer","saveAnswer","handleTextAnswerChange","text","window","textAnswerTimeout","clearTimeout","setTimeout","handleCodeAnswerChange","code","codeAnswerTimeout","answerData","handleNextQuestion","handlePrevQuestion","handleJumpToQuestion","index","submitExam","removeEventListener","getTracks","track","stop","fileName","lineNumber","columnNumber","className","children","currentQuestion","isLastQuestion","isFirstQuestion","_id","isMultipleChoice","type","isTimeAlmostUp","map","q","onClick","image","src","alt","options","option","name","value","checked","onChange","htmlFor","e","target","placeholder","rows","codeLanguage","disabled","ref","autoPlay","muted","isOpen","onClose","title","footer","Object","keys","_c","$RefreshReg$"],"sources":["D:/MyDownloads/cloneonlineexamplatform1/frontend/src/pages/student/TakeExam.js"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect, useContext, useRef } from \"react\"\nimport { useParams, useLocation, useNavigate } from \"react-router-dom\"\nimport { toast } from \"react-toastify\"\nimport { examsAPI, questionsAPI, submissionsAPI } from \"../../services/api\"\nimport AuthContext from \"../../context/AuthContext\"\nimport Loader from \"../../components/common/Loader\"\nimport Modal from \"../../components/common/Modal\"\nimport { joinExam, startExam, syncTime, sendProctoringAlert } from \"../../services/socket\"\n\nconst TakeExam = () => {\n  const { id: examId } = useParams()\n  const location = useLocation()\n  const navigate = useNavigate()\n  const { user } = useContext(AuthContext)\n  const [loading, setLoading] = useState(true)\n  const [submitting, setSubmitting] = useState(false)\n  const [exam, setExam] = useState(null)\n  const [questions, setQuestions] = useState([])\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)\n  const [answers, setAnswers] = useState({})\n  const [timeRemaining, setTimeRemaining] = useState(0)\n  const [showSubmitModal, setShowSubmitModal] = useState(false)\n  const [submission, setSubmission] = useState(null)\n  const timerRef = useRef(null)\n  const webcamRef = useRef(null)\n\n  // Get submission ID from location state or create a new one\n  const submissionId = location.state?.submissionId\n\n  useEffect(() => {\n    if (!submissionId) {\n      // If no submission ID is provided, redirect to exam details\n      navigate(`/exams/${examId}`)\n      return\n    }\n\n    fetchExamData()\n\n    // Clean up timer on unmount\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current)\n      }\n    }\n  }, [examId, submissionId])\n\n  const fetchExamData = async () => {\n    setLoading(true)\n    try {\n      // Fetch exam details\n      const examResponse = await examsAPI.getExam(examId)\n      setExam(examResponse.data.data)\n\n      // Fetch submission\n      const submissionResponse = await submissionsAPI.getSubmission(submissionId)\n      const submissionData = submissionResponse.data.data\n      setSubmission(submissionData)\n\n      // If submission is already completed, redirect to results\n      if (submissionData.isCompleted) {\n        navigate(`/results/${submissionId}`)\n        return\n      }\n\n      // Fetch questions\n      const questionsResponse = await questionsAPI.getExamQuestions(examId)\n      let examQuestions = questionsResponse.data.data\n\n      // Randomize questions if needed\n      if (examResponse.data.data.randomizeQuestions) {\n        examQuestions = shuffleArray(examQuestions)\n      }\n\n      setQuestions(examQuestions)\n\n      // Initialize answers from existing submission\n      const initialAnswers = {}\n      if (submissionData.answers && submissionData.answers.length > 0) {\n        submissionData.answers.forEach((answer) => {\n          initialAnswers[answer.question] = {\n            selectedOptions: answer.selectedOptions || [],\n            textAnswer: answer.textAnswer || \"\",\n            codeAnswer: answer.codeAnswer || \"\",\n          }\n        })\n      }\n      setAnswers(initialAnswers)\n\n      // Calculate time remaining\n      const startTime = new Date(submissionData.startTime)\n      const durationMs = examResponse.data.data.duration * 60 * 1000\n      const endTime = new Date(startTime.getTime() + durationMs)\n      const now = new Date()\n      const remainingMs = Math.max(0, endTime - now)\n      setTimeRemaining(Math.floor(remainingMs / 1000))\n\n      // Start timer\n      startTimer()\n\n      // Join exam room via socket\n      joinExam(examId)\n\n      // Notify that student started exam\n      startExam(examId, user.id, timeRemaining)\n\n      // Initialize proctoring if needed\n      if (examResponse.data.data.isProctored) {\n        initializeProctoring()\n      }\n\n      setLoading(false)\n    } catch (error) {\n      console.error(\"Error fetching exam data:\", error)\n      toast.error(\"Failed to load exam\")\n      navigate(`/exams/${examId}`)\n    }\n  }\n\n  const startTimer = () => {\n    timerRef.current = setInterval(() => {\n      setTimeRemaining((prevTime) => {\n        if (prevTime <= 1) {\n          clearInterval(timerRef.current)\n          handleTimeUp()\n          return 0\n        }\n\n        // Sync time every minute\n        if (prevTime % 60 === 0) {\n          syncTime(examId, user.id, prevTime)\n        }\n\n        return prevTime - 1\n      })\n    }, 1000)\n  }\n\n  const handleTimeUp = async () => {\n    toast.warning(\"Time is up! Your exam is being submitted.\")\n    await handleSubmitExam()\n  }\n\n  const initializeProctoring = async () => {\n    if (!exam.isProctored) return\n\n    try {\n      // Request webcam access if needed\n      if (exam.proctoringSettings.detectFaces || exam.proctoringSettings.recordWebcam) {\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true })\n        if (webcamRef.current) {\n          webcamRef.current.srcObject = stream\n        }\n\n        // Set up face detection (simplified for this example)\n        if (exam.proctoringSettings.detectFaces) {\n          // In a real implementation, you would use a face detection library\n          // For now, we'll just simulate detection with random alerts\n          setInterval(() => {\n            const shouldAlert = Math.random() < 0.05 // 5% chance of alert\n            if (shouldAlert) {\n              sendProctoringAlert(examId, user.id, \"face_missing\", \"Face not detected in frame\")\n              toast.warning(\"Proctoring Alert: Face not detected\")\n            }\n          }, 30000)\n        }\n      }\n\n      // Set up tab switching detection\n      if (exam.proctoringSettings.preventTabSwitching) {\n        document.addEventListener(\"visibilitychange\", handleVisibilityChange)\n      }\n    } catch (error) {\n      console.error(\"Error initializing proctoring:\", error)\n      toast.error(\"Failed to initialize proctoring. Please ensure camera access is allowed.\")\n    }\n  }\n\n  const handleVisibilityChange = () => {\n    if (document.hidden) {\n      sendProctoringAlert(examId, user.id, \"tab_switch\", \"User switched tabs\")\n      toast.warning(\"Proctoring Alert: Tab switching detected\")\n    }\n  }\n\n  const shuffleArray = (array) => {\n    const newArray = [...array]\n    for (let i = newArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1))\n      ;[newArray[i], newArray[j]] = [newArray[j], newArray[i]]\n    }\n    return newArray\n  }\n\n  const formatTime = (seconds) => {\n    const hours = Math.floor(seconds / 3600)\n    const minutes = Math.floor((seconds % 3600) / 60)\n    const secs = seconds % 60\n\n    return `${hours.toString().padStart(2, \"0\")}:${minutes.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`\n  }\n\n  const handleOptionChange = (questionId, optionText, isMultiple) => {\n    setAnswers((prevAnswers) => {\n      const currentAnswer = prevAnswers[questionId] || { selectedOptions: [], textAnswer: \"\", codeAnswer: \"\" }\n\n      let newSelectedOptions\n      if (isMultiple) {\n        // For multiple choice, toggle the option\n        if (currentAnswer.selectedOptions.includes(optionText)) {\n          newSelectedOptions = currentAnswer.selectedOptions.filter((opt) => opt !== optionText)\n        } else {\n          newSelectedOptions = [...currentAnswer.selectedOptions, optionText]\n        }\n      } else {\n        // For single choice, replace the selection\n        newSelectedOptions = [optionText]\n      }\n\n      const updatedAnswer = {\n        ...currentAnswer,\n        selectedOptions: newSelectedOptions,\n      }\n\n      // Save answer to server\n      saveAnswer(questionId, updatedAnswer)\n\n      return {\n        ...prevAnswers,\n        [questionId]: updatedAnswer,\n      }\n    })\n  }\n\n  const handleTextAnswerChange = (questionId, text) => {\n    setAnswers((prevAnswers) => {\n      const currentAnswer = prevAnswers[questionId] || { selectedOptions: [], textAnswer: \"\", codeAnswer: \"\" }\n\n      const updatedAnswer = {\n        ...currentAnswer,\n        textAnswer: text,\n      }\n\n      // Debounce saving text answers to reduce API calls\n      if (window.textAnswerTimeout) {\n        clearTimeout(window.textAnswerTimeout)\n      }\n\n      window.textAnswerTimeout = setTimeout(() => {\n        saveAnswer(questionId, updatedAnswer)\n      }, 1000)\n\n      return {\n        ...prevAnswers,\n        [questionId]: updatedAnswer,\n      }\n    })\n  }\n\n  const handleCodeAnswerChange = (questionId, code) => {\n    setAnswers((prevAnswers) => {\n      const currentAnswer = prevAnswers[questionId] || { selectedOptions: [], textAnswer: \"\", codeAnswer: \"\" }\n\n      const updatedAnswer = {\n        ...currentAnswer,\n        codeAnswer: code,\n      }\n\n      // Debounce saving code answers to reduce API calls\n      if (window.codeAnswerTimeout) {\n        clearTimeout(window.codeAnswerTimeout)\n      }\n\n      window.codeAnswerTimeout = setTimeout(() => {\n        saveAnswer(questionId, updatedAnswer)\n      }, 1000)\n\n      return {\n        ...prevAnswers,\n        [questionId]: updatedAnswer,\n      }\n    })\n  }\n\n  const saveAnswer = async (questionId, answerData) => {\n    try {\n      await submissionsAPI.saveAnswer(submissionId, {\n        question: questionId,\n        selectedOptions: answerData.selectedOptions,\n        textAnswer: answerData.textAnswer,\n        codeAnswer: answerData.codeAnswer,\n      })\n    } catch (error) {\n      console.error(\"Error saving answer:\", error)\n      // Don't show toast for every save to avoid spamming the user\n    }\n  }\n\n  const handleNextQuestion = () => {\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1)\n    }\n  }\n\n  const handlePrevQuestion = () => {\n    if (currentQuestionIndex > 0) {\n      setCurrentQuestionIndex(currentQuestionIndex - 1)\n    }\n  }\n\n  const handleJumpToQuestion = (index) => {\n    if (index >= 0 && index < questions.length) {\n      setCurrentQuestionIndex(index)\n    }\n  }\n\n  const handleSubmitExam = async () => {\n    setSubmitting(true)\n    try {\n      // Submit the exam\n      await submissionsAPI.submitExam(submissionId)\n\n      // Clear timer\n      if (timerRef.current) {\n        clearInterval(timerRef.current)\n      }\n\n      // Clean up proctoring\n      if (exam.isProctored) {\n        document.removeEventListener(\"visibilitychange\", handleVisibilityChange)\n        if (webcamRef.current && webcamRef.current.srcObject) {\n          webcamRef.current.srcObject.getTracks().forEach((track) => track.stop())\n        }\n      }\n\n      // Navigate to results page\n      navigate(`/results/${submissionId}`)\n    } catch (error) {\n      console.error(\"Error submitting exam:\", error)\n      toast.error(\"Failed to submit exam. Please try again.\")\n      setSubmitting(false)\n    }\n  }\n\n  if (loading) {\n    return <Loader />\n  }\n\n  if (!exam || !questions.length) {\n    return (\n      <div className=\"container py-4\">\n        <div className=\"alert alert-danger\">Failed to load exam questions</div>\n      </div>\n    )\n  }\n\n  const currentQuestion = questions[currentQuestionIndex]\n  const isLastQuestion = currentQuestionIndex === questions.length - 1\n  const isFirstQuestion = currentQuestionIndex === 0\n  const currentAnswer = answers[currentQuestion._id] || { selectedOptions: [], textAnswer: \"\", codeAnswer: \"\" }\n  const isMultipleChoice = currentQuestion.type === \"mcq-multiple\"\n  const isTimeAlmostUp = timeRemaining < 300 // Less than 5 minutes\n\n  return (\n    <div className=\"exam-container\">\n      {/* Timer */}\n      <div className={`exam-timer ${isTimeAlmostUp ? \"timer-warning\" : \"\"}`}>\n        <div>\n          <span>\n            Question {currentQuestionIndex + 1} of {questions.length}\n          </span>\n        </div>\n        <div className=\"timer-value\">Time Remaining: {formatTime(timeRemaining)}</div>\n      </div>\n\n      {/* Proctoring warning if enabled */}\n      {exam.isProctored && (\n        <div className=\"proctoring-container\">\n          <span>⚠️ This exam is being proctored. Please keep your face visible and do not switch tabs.</span>\n        </div>\n      )}\n\n      {/* Question Navigation */}\n      <div className=\"question-navigation\">\n        {questions.map((q, index) => (\n          <button\n            key={q._id}\n            className={`question-nav-button ${index === currentQuestionIndex ? \"active\" : \"\"} ${answers[q._id] ? \"answered\" : \"\"}`}\n            onClick={() => handleJumpToQuestion(index)}\n          >\n            {index + 1}\n          </button>\n        ))}\n      </div>\n\n      {/* Current Question */}\n      <div className=\"question-container\">\n        <div className=\"question-number\">Question {currentQuestionIndex + 1}</div>\n        <div className=\"question-text\">{currentQuestion.text}</div>\n\n        {/* Question Image if available */}\n        {currentQuestion.image && (\n          <img src={currentQuestion.image || \"/placeholder.svg\"} alt=\"Question\" className=\"question-image\" />\n        )}\n\n        {/* Code Snippet if available */}\n        {currentQuestion.code && (\n          <div className=\"code-snippet\">\n            <pre>\n              <code>{currentQuestion.code}</code>\n            </pre>\n          </div>\n        )}\n\n        {/* Question Options for MCQ */}\n        {(currentQuestion.type === \"mcq-single\" || currentQuestion.type === \"mcq-multiple\") && (\n          <ul className=\"options-list\">\n            {currentQuestion.options.map((option, index) => (\n              <li key={index} className=\"option-item\">\n                <label className=\"option-label\">\n                  <input\n                    type={isMultipleChoice ? \"checkbox\" : \"radio\"}\n                    name={`question-${currentQuestion._id}`}\n                    value={option.text}\n                    checked={currentAnswer.selectedOptions.includes(option.text)}\n                    onChange={() => handleOptionChange(currentQuestion._id, option.text, isMultipleChoice)}\n                    className=\"option-input\"\n                  />\n                  <span className=\"option-text\">{option.text}</span>\n                </label>\n              </li>\n            ))}\n          </ul>\n        )}\n\n        {/* Text Answer for short-answer or essay */}\n        {(currentQuestion.type === \"short-answer\" || currentQuestion.type === \"essay\") && (\n          <div className=\"text-answer-container\">\n            <label htmlFor=\"text-answer\" className=\"text-answer-label\">\n              Your Answer:\n            </label>\n            <textarea\n              id=\"text-answer\"\n              className=\"text-answer\"\n              value={currentAnswer.textAnswer}\n              onChange={(e) => handleTextAnswerChange(currentQuestion._id, e.target.value)}\n              placeholder=\"Type your answer here...\"\n              rows={currentQuestion.type === \"essay\" ? 10 : 4}\n            ></textarea>\n          </div>\n        )}\n\n        {/* Code Answer for coding questions */}\n        {currentQuestion.type === \"coding\" && (\n          <div className=\"code-answer-container\">\n            <label htmlFor=\"code-answer\" className=\"text-answer-label\">\n              Your Code ({currentQuestion.codeLanguage || \"text\"}):\n            </label>\n            <textarea\n              id=\"code-answer\"\n              className=\"code-editor\"\n              value={currentAnswer.codeAnswer}\n              onChange={(e) => handleCodeAnswerChange(currentQuestion._id, e.target.value)}\n              placeholder={`Write your ${currentQuestion.codeLanguage || \"code\"} here...`}\n              rows={12}\n            ></textarea>\n          </div>\n        )}\n\n        {/* Navigation Buttons */}\n        <div className=\"navigation-buttons\">\n          <button className=\"btn btn-secondary\" onClick={handlePrevQuestion} disabled={isFirstQuestion}>\n            Previous\n          </button>\n\n          {isLastQuestion ? (\n            <button className=\"btn btn-primary\" onClick={() => setShowSubmitModal(true)}>\n              Submit Exam\n            </button>\n          ) : (\n            <button className=\"btn btn-primary\" onClick={handleNextQuestion}>\n              Next\n            </button>\n          )}\n        </div>\n      </div>\n\n      {/* Webcam feed for proctoring */}\n      {exam.isProctored && (exam.proctoringSettings.detectFaces || exam.proctoringSettings.recordWebcam) && (\n        <div className=\"webcam-container\">\n          <video ref={webcamRef} autoPlay muted className=\"webcam-video\"></video>\n        </div>\n      )}\n\n      {/* Submit Confirmation Modal */}\n      <Modal\n        isOpen={showSubmitModal}\n        onClose={() => setShowSubmitModal(false)}\n        title=\"Submit Exam\"\n        footer={\n          <>\n            <button className=\"btn btn-secondary\" onClick={() => setShowSubmitModal(false)}>\n              Cancel\n            </button>\n            <button className=\"btn btn-primary\" onClick={handleSubmitExam} disabled={submitting}>\n              {submitting ? \"Submitting...\" : \"Submit\"}\n            </button>\n          </>\n        }\n      >\n        <div>\n          <p>Are you sure you want to submit your exam?</p>\n          <p>\n            You have answered {Object.keys(answers).length} out of {questions.length} questions.\n            {Object.keys(answers).length < questions.length && (\n              <span className=\"text-danger\"> Some questions are still unanswered.</span>\n            )}\n          </p>\n          <p>Once submitted, you cannot change your answers.</p>\n        </div>\n      </Modal>\n    </div>\n  )\n}\n\nexport default TakeExam\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}